{"ast":null,"code":"// src/services/api.ts\n\nimport axios from 'axios';\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001'\n});\n\n// リクエストインターセプターの設定\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token.replace(/^Bearer\\s/, '')}`;\n  }\n  return config;\n}, error => {\n  console.error('リクエストエラー:', error);\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","process","env","REACT_APP_API_BASE_URL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","replace","error","console","Promise","reject"],"sources":["/Users/yusukekageyama/memoboard-app/frontend/src/services/api.ts"],"sourcesContent":["// src/services/api.ts\n\nimport axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001',\n});\n\n// リクエストインターセプターの設定\ninstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token && config.headers) {\n      config.headers.Authorization = `Bearer ${token.replace(/^Bearer\\s/, '')}`;\n    }\n    return config;\n  },\n  (error) => {\n    console.error('リクエストエラー:', error);\n    return Promise.reject(error);\n  }\n);\n\nexport default instance;"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI;AACjD,CAAC,CAAC;;AAEF;AACAL,QAAQ,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,IAAID,MAAM,CAACI,OAAO,EAAE;IAC3BJ,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,CAACK,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,EAAE;EAC3E;EACA,OAAON,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACTC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;EACjC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAehB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}